generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma"
  output   = "../lib/types/prisma"

  modelSuffix = "Z"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_DEV_URL")
}

model Circuit {
  id              String   @id @default(uuid())
  created_at      DateTime @default(now())
  title           String   @unique
  wikipediaPageId Int?
  lon             Float?
  lat             Float?
  rounds          Round[]
}

model Round {
  id         String    @id @default(uuid())
  created_at DateTime  @default(now())
  number     Int       @default(0)
  title      String
  season     String
  link       String?
  circuitId  String
  series     String
  circuit    Circuit   @relation(fields: [circuitId], references: [id])
  sessions   Session[]

  @@unique([title, number, series, season], name: "uniqueRoundPerSeriesSeason")
}

model Session {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  number     Int      @default(0)
  startDate  DateTime
  endDate    DateTime
  roundId    String
  type       String
  round      Round    @relation(fields: [roundId], references: [id])

  @@unique([type, number, roundId], name: "uniqueSessionPerRoundId")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model UserSession {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      UserSession[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
