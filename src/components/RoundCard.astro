---
import { Icon } from "astro-icon/components";
import type { trpc } from "../../lib/trpc/client";
import { getSeriesIcon, getSeriesTitleShort } from "../../lib/utils/series";
import NextSessionWrapper from "../components/NextSessionWrapper.svelte";

type Round = Awaited<ReturnType<typeof trpc.rounds.getWeekends.query>>[number];
interface Props {
    round: Round;
    showNextSession?: boolean;
    link?: string;
}
const { round, showNextSession, link } = Astro.props;

const now = Date.now();
---

<a
    style={`--color-hue: var(--${round.series}-hue)`}
    class={`round-header button ${
        round.endDate && round.endDate.valueOf() < now ? "past" : ""
    }`}
    href={link ?? "/"}
>
    <div class="round-title">
        <Icon
            name={`fluent-emoji-high-contrast:${getSeriesIcon(round.series)}`}
        />
        <h2>
            {getSeriesTitleShort(round.series)}
            {round.title}
        </h2>
        <div>
            {round.circuit.wikipediaTitle}
        </div>
    </div>

    {showNextSession && <NextSessionWrapper roundId={round.id} client:idle />}
</a>
<!-- FIXME: doesn't work with ViewTransitions?
<script>
    async function goBack() {
        console.log("l");
        if (navigation.canGoBack) {
            await navigation.back();
        }
    }

    const anchors = document.querySelectorAll<HTMLAnchorElement>(
        ".round-header:not([href])"
    );
    anchors.forEach((a) => a.addEventListener("click", goBack));
</script> -->

<style lang="scss">
    .round-header {
        :global(*) {
            --color-hue: inherit;
        }

        display: flex;
        flex-direction: column;
        align-items: flex-start;
        gap: var(--size-3);
        padding: var(--size-4);

        isolation: isolate;
        position: relative;
        overflow: hidden;

        > .round-title > :global([data-icon]) {
            color: var(--color-6);
            font-size: 12rem;

            position: absolute;
            top: -3rem;
            right: -2.5rem;
            z-index: -1;

            transition: all 140ms cubic-bezier(0.25, 0.46, 0.45, 0.94);
        }

        &:hover > .round-title > :global([data-icon]) {
            color: var(--color-5);
        }

        &.past {
            opacity: 0.5;
        }
    }
</style>
