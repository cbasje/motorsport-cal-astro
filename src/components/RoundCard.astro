---
import { Icon } from "astro-icon/components";
import type { trpc } from "lib/trpc/client";
import { getCircuitTitle } from "lib/utils/circuit";
import { getSeriesIcon, getSeriesTitleShort } from "lib/utils/series";
import NextSessionWrapper from "../components/NextSessionWrapper.svelte";

type Round = Awaited<ReturnType<typeof trpc.rounds.getWeekend.query>>[number];
interface Props {
    round: Round;
    showNextSession?: boolean;
    link?: string;
}
const { round, showNextSession, link } = Astro.props;
---

<button is="back-button" data-link={link} class="round-header btn btn-color">
    <Icon name={`fluent-emoji-high-contrast:${getSeriesIcon(round.series)}`} />

    <div class="round-title">
        <h2>
            {getSeriesTitleShort(round.series)}{" "}
            {
                getCircuitTitle(
                    round.series,
                    round.circuit.title,
                    round.circuit.country,
                    round.circuit.locality
                ) ?? round.title
            }
        </h2>
        <div>
            {round.circuit.title}
        </div>
    </div>

    {showNextSession && <NextSessionWrapper roundId={round.id} client:idle />}
</button>

<script src="../../lib/button-component.ts"></script>

<style lang="postcss">
    .round-header {
        :global(*) {
            --color-hue: inherit;
        }

        display: flex;
        width: 100%;
        flex-direction: column;
        align-items: flex-start;
        gap: var(--size-3);
        padding: var(--size-5);
        z-index: 10;

        box-shadow: none;

        isolation: isolate;
        position: relative;
        overflow: hidden;

        .round-title {
            text-align: start;
        }

        > :global([data-icon]) {
            color: var(--color-6);
            font-size: 12rem;

            position: absolute;
            top: calc(50% - 6rem);
            right: -1.5rem;
            z-index: -1;

            transition: all 140ms cubic-bezier(0.25, 0.46, 0.45, 0.94);
        }

        &:hover {
            box-shadow: none;

            > :global([data-icon]) {
                color: var(--color-5);
            }
        }

        &.past {
            opacity: 0.5;
        }
    }
</style>
