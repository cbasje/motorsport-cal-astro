---
import { Icon } from "astro-icon/components";
import { getCircuitTitle } from "$lib/utils/circuit";
import { getSeriesIcon, getSeriesTitleShort } from "$lib/utils/series";
import NextSessionWrapper from "$components/NextSessionWrapper.svelte";
import * as rounds from "$db/round-repository";
import type { SeriesId } from "$db/types";

type Round = Awaited<ReturnType<typeof rounds.getWeekends>>[number][number];
interface Props {
	round: Round;
	showNextSession?: boolean;
	link?: string;
}
const { round, showNextSession, link } = Astro.props;

const getRoundTitle = () => {
	return `${getSeriesTitleShort(round.series)} ${
		getCircuitTitle(round.series, round.title, round.country, round.locality) ?? round.title
	}${round.isTest ?? " Test"}`;
};
---

<button is="back-button" data-link={link} class="round-header btn btn-color">
	<Icon name={`fluent-emoji-high-contrast:${getSeriesIcon(round.series)}`} />

	<div class="round-title">
		<h2>
			{getRoundTitle()}
		</h2>
		<div>
			{round.circuitTitle}
		</div>
	</div>

	{
		showNextSession && (
			<NextSessionWrapper roundId={round.id} client:idle>
				<Icon name="filled/arrow-right" slot="icon-future" />
				<Icon name="filled/car" slot="icon-now" />
			</NextSessionWrapper>
		)
	}
</button>

<script src="../lib/button-component.ts"></script>

<style lang="postcss">
    .round-header {
        :global(*) {
            --color-hue: inherit;
        }

        display: flex;
        width: 100%;
        flex-direction: column;
        align-items: flex-start;
        gap: var(--size-3);
        padding: var(--size-5);
        z-index: 10;

        box-shadow: none;

        isolation: isolate;
        position: relative;
        overflow: hidden;

        .round-title {
            text-align: start;
        }

        > :global([data-icon]) {
            color: var(--color-6);
            font-size: 12rem;

            position: absolute;
            top: calc(50% - 6rem);
            right: -1.5rem;
            z-index: -1;

            transition: all 140ms cubic-bezier(0.25, 0.46, 0.45, 0.94);
        }

        &:hover {
            box-shadow: none;

            > :global([data-icon]) {
                color: var(--color-5);
            }
        }

        &.past {
            opacity: 0.5;
        }
    }
</style>
