---
import RoundCard from "$components/RoundCard.astro";
import RoundNav from "$components/RoundNav.astro";
import SessionCard from "$components/SessionCard.astro";
import * as rounds from "$db/rounds/repository";
import * as sessions from "$db/sessions/repository";
import MainLayout from "$layouts/main.astro";

const { pathname } = Astro.url;
const { id } = Astro.params;

if (!id) return errorRes(new CustomError("Round not found", 404));

const round = await rounds.getOne(id);
const sessionsByRound = await sessions.getSessionsByRoundId(id);
---

<MainLayout title={round?.title ?? "Undefined Round"} path={pathname}>
	<RoundNav />

	<main id="main-content">		
		{
			round && (
				<>
					<div class="round-item" transition:name={`round-${round.id}`}>
						<RoundCard round={round} />
					</div>
					<ol role="list" class="session-list">
						{sessionsByRound.map((session, i) => (
							<li
								transition:name={`sessions-${i}-${round.id}`}
								class={session.end.valueOf() < Date.now() ? "past" : ""}
								role="listitem"
							>
								<SessionCard
									session={session}
									series={round.series}
									timeZone={round.timezone ?? ""}
								/>
							</li>
						))}
					</ol>
				</>
			)
		}
	</main>
</MainLayout>

<style lang="postcss" define:vars={{ "color-hue": `var(--${round?.series}-hue)` }}>
    .session-list {
        list-style: none;
        display: flex;
        flex-direction: column;
        gap: var(--size-2);
        margin-inline: var(--size-3);
        padding: 0;

        > li {
            padding: var(--size-4);
            background: var(--color-4);
            color: var(--text-on-accent);
            border: var(--color-2) var(--border-size-2) solid;
            border-radius: var(--radius-4);
            max-inline-size: none;
        }
        :global(.past) {
            opacity: 0.5;
        }
    }
</style>
